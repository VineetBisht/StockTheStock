package manager;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

import java.sql.*;

public class ManageStockDB {
    private Connection con;
    int rows;
    int count =0;
    public ManageStockDB() {
        String username = "n01324490";
        String password = "oracle";
        String url = "jdbc:oracle:thin:@calvin.humber.ca:1521:grok";
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            this.con = DriverManager.getConnection(url, username, password);
            // check if "employee" table is there
            DatabaseMetaData dbm = con.getMetaData();
            ResultSet tables = dbm.getTables(null, null, "stock", null);
            if (!tables.next()) {
                PreparedStatement pStmt = null;
                String create = "CREATE TABLE stock(product_id NUMBER GENERATED BY DEFAULT AS IDENTITY START WITH 320 PRIMARY KEY," +
                        "name VARCHAR2( 255 ) NOT NULL," +
                        "price NUMBER( 8, 2 )," +
                        "volume INTEGER," +
                        "distributor_id NUMBER)";
                pStmt = con.prepareStatement(create);
                pStmt.executeUpdate();
                System.out.println("Created new 'Stock' table successfully ");
            }

        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }



    public int addItem(ManageStock i){
        String addQuerry = "INSERT INTO stock (product_id, name, price, volume, distributor_id) VALUES (?, ?, ?, ?, ?)";

        try{
            //step1
            PreparedStatement pst = con.prepareStatement(addQuerry);
            //step 2
            pst.setInt(1, i.getProduct_id());
            pst.setString(2, i.getName());
            pst.setDouble(3, i.getPrice());
            pst.setInt(4, i.getVolume());
            pst.setInt(5, i.getDistributor_id());

            //step 3
            rows = pst.executeUpdate();
            return rows;

        }catch(SQLException e){
            System.err.println(e);
            return 0;
        }

    }

    public int delete(ManageStock i){
        String deleteQuerry = "DELETE FROM stock WHERE product_id = ?";

        try{
            PreparedStatement pst = con.prepareStatement(deleteQuerry);
            pst.setInt(1, i.getProduct_id());
            rows = pst.executeUpdate();
            return  rows;
        }catch(SQLException e){
            System.err.println(e);
            return 0;
        }
    }

    public ManageStock fDelete(ManageStock i){
        String q = "SELECT * FROM stock WHERE product_id = ?";
        try{
            PreparedStatement pST = con.prepareStatement(q);
            pST.setInt(1, i.getProduct_id());

            ResultSet rs = pST.executeQuery();
            ManageStock stockItem = new ManageStock();
            if (rs.next()) {
                stockItem.setProduct_id(rs.getInt("product_id"));
                stockItem.setName(rs.getString("name"));
                stockItem.setPrice(rs.getInt("price"));
                stockItem.setVolume(rs.getInt("volume"));
                stockItem.setDistributor_id(rs.getInt("distributor_id"));

                return stockItem;
            }
            else
                return null;
        }catch(SQLException era){
            System.err.println(era);
            return null;
        }
    }

    public int update(ManageStock i){
        String updateQuerry = "UPDATE stock SET name = ?, price = ?, volume = ?, distributor_id = ?"
                + "WHERE product_id = ?";
        try{
            PreparedStatement pst = con.prepareStatement(updateQuerry);
            pst.setString(1, i.getName());
            pst.setDouble(2, i.getPrice());
            pst.setInt(3, i.getVolume());
            pst.setDouble(4, i.getDistributor_id());
            pst.setInt(5, i.getProduct_id());
            rows = pst.executeUpdate();
            return  rows;
        }catch(SQLException e){
            System.err.println(e);
            return 0;
        }
    }

    public ObservableList<ManageStock> list(){
        String listQuerry = "SELECT * FROM stock";
        ObservableList<ManageStock> obList = FXCollections.observableArrayList();

        try{
            PreparedStatement pST = con.prepareStatement(listQuerry);
            ResultSet rs = pST.executeQuery();
            if(rs.next()){
                obList.add(new ManageStock(rs.getInt("product_id"), rs.getString("name"),
                        rs.getInt("price"), rs.getInt("volume"), rs.getInt("distributor_id")));
                return obList;
            }
            else{
                return null;
            }

        }catch(SQLException e){
            System.err.println(e);
            return null;
        }
    }

    public ObservableList<ManageStock> find(ManageStock i) {
        String findQuerry = "SELECT * FROM atock WHERE product_id = ?";
        ObservableList<ManageStock> obList = FXCollections.observableArrayList();
        try {
            PreparedStatement pST = con.prepareStatement(findQuerry);
            pST.setInt(1, i.getProduct_id());

            ResultSet rs = pST.executeQuery();
            if (rs.next()) {
                obList.add(new ManageStock(rs.getInt("product_id"), rs.getString("name"),
                        rs.getInt("price"), rs.getInt("volume"), rs.getInt("distributor_id")));
                return obList;
            } else {
                return null;
            }

        } catch (SQLException era) {
            System.err.println(era);
            return null;
        }
    }

}

